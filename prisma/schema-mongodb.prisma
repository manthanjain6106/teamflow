// MongoDB-compatible Prisma schema for TeamFlow
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
  CANCELED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum DependencyType {
  BLOCKS
  DEPENDS_ON
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  SELECT
  MULTI_SELECT
  CHECKBOX
  URL
  EMAIL
}

enum ViewType {
  LIST
  BOARD
  CALENDAR
  GANTT
  TIMELINE
}

enum TemplateType {
  TASK
  PROJECT
  WORKSPACE
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  ATTACHMENT_ADDED
  STATUS_CHANGED
  PRIORITY_CHANGED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_MENTION
  DUE_DATE_REMINDER
  PROJECT_INVITATION
}

// Authentication Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts             Account[]
  sessions             Session[]
  workspaceMemberships WorkspaceMember[]
  createdWorkspaces    Workspace[]       @relation("WorkspaceCreator")
  assignedTasks        Task[]            @relation("TaskAssignee")
  createdTasks         Task[]            @relation("TaskCreator")
  comments             Comment[]
  timeEntries          TimeEntry[]
  activities           Activity[]
  notifications        Notification[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Models
model Workspace {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String   @db.ObjectId

  creator User              @relation("WorkspaceCreator", fields: [creatorId], references: [id])
  members WorkspaceMember[]
  spaces  Space[]
}

model WorkspaceMember {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  userId      String        @db.ObjectId
  workspaceId String        @db.ObjectId

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model Space {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  color       String?
  private     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspaceId String   @db.ObjectId

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  lists     List[]
}

model List {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  color       String?
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  spaceId     String   @db.ObjectId

  space Space  @relation(fields: [spaceId], references: [id])
  tasks Task[]
  views View[]
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  status      TaskStatus @default(OPEN)
  priority    Priority   @default(NORMAL)
  position    Int        @default(0)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  listId      String     @db.ObjectId
  creatorId   String     @db.ObjectId
  assigneeId  String?    @db.ObjectId

  list                  List                 @relation(fields: [listId], references: [id])
  creator               User                 @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee              User?                @relation("TaskAssignee", fields: [assigneeId], references: [id])
  dependencies          TaskDependency[]     @relation("TaskDependencies")
  dependents            TaskDependency[]     @relation("TaskDependents")
  comments              Comment[]
  attachments           Attachment[]
  timeEntries           TimeEntry[]
  customFieldValues     CustomFieldValue[]
  tags                  TaskTag[]
  activities            Activity[]
}

model TaskDependency {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  type         DependencyType @default(BLOCKS)
  createdAt    DateTime       @default(now())
  taskId       String         @db.ObjectId
  dependsOnId  String         @db.ObjectId

  task      Task @relation("TaskDependencies", fields: [taskId], references: [id])
  dependsOn Task @relation("TaskDependents", fields: [dependsOnId], references: [id])

  @@unique([taskId, dependsOnId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String   @db.ObjectId
  authorId  String   @db.ObjectId

  task   Task @relation(fields: [taskId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())
  taskId    String   @db.ObjectId

  task Task @relation(fields: [taskId], references: [id])
}

model TimeEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  duration    Int       // in seconds
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  taskId      String    @db.ObjectId
  userId      String    @db.ObjectId

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model CustomField {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        CustomFieldType
  required    Boolean         @default(false)
  options     String[]        // For select/multi-select fields
  createdAt   DateTime        @default(now())
  workspaceId String          @db.ObjectId

  values CustomFieldValue[]
}

model CustomFieldValue {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  value   String
  taskId  String @db.ObjectId
  fieldId String @db.ObjectId

  task  Task        @relation(fields: [taskId], references: [id])
  field CustomField @relation(fields: [fieldId], references: [id])

  @@unique([taskId, fieldId])
}

model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  createdAt   DateTime @default(now())
  workspaceId String   @db.ObjectId

  tasks TaskTag[]
}

model TaskTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  taskId String @db.ObjectId
  tagId  String @db.ObjectId

  task Task @relation(fields: [taskId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([taskId, tagId])
}

model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ViewType
  filters   Json
  sorting   Json
  grouping  Json?
  createdAt DateTime @default(now())
  listId    String   @db.ObjectId

  list List @relation(fields: [listId], references: [id])
}

model Template {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  type        TemplateType
  content     Json
  createdAt   DateTime     @default(now())
  workspaceId String       @db.ObjectId
}

model Activity {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      ActivityType
  message   String
  metadata  Json?
  createdAt DateTime     @default(now())
  userId    String       @db.ObjectId
  taskId    String?      @db.ObjectId

  user User  @relation(fields: [userId], references: [id])
  task Task? @relation(fields: [taskId], references: [id])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String           @db.ObjectId

  user User @relation(fields: [userId], references: [id])
}